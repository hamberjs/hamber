/* generated by Hamber vX.Y.Z */
import {
	HamberComponent,
	append,
	detach,
	init,
	insert,
	noop,
	safe_not_equal,
	set_svg_attributes,
	svg_element
} from "hamber/internal";

function create_dynamic_element(ctx) {
	let hamber_element1;
	let hamber_element0;

	return {
		c() {
			hamber_element1 = svg_element(/*tag*/ ctx[0].svg);
			hamber_element0 = svg_element(/*tag*/ ctx[0].path);
			set_svg_attributes(hamber_element0, { xmlns: "http://www.w3.org/2000/svg" });
			set_svg_attributes(hamber_element1, { xmlns: "http://www.w3.org/2000/svg" });
		},
		m(target, anchor) {
			insert(target, hamber_element1, anchor);
			append(hamber_element1, hamber_element0);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(hamber_element1);
		}
	};
}

function create_fragment(ctx) {
	let hamber_element = /*tag*/ ctx[0].svg && create_dynamic_element(ctx);

	return {
		c() {
			if (hamber_element) hamber_element.c();
		},
		m(target, anchor) {
			if (hamber_element) hamber_element.m(target, anchor);
		},
		p(ctx, [dirty]) {
			if (/*tag*/ ctx[0].svg) {
				hamber_element.p(ctx, dirty);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (hamber_element) hamber_element.d(detaching);
		}
	};
}

function instance($$self) {
	const tag = { svg: 'svg', path: 'path' };
	return [tag];
}

class Component extends HamberComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;
